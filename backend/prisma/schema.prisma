// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entidades originales
model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

// Nuevas entidades

model Company {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  companyId  Int
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(255)
  role       String?  @db.VarChar(50)
  isActive   Boolean  @default(true)
  interviews Interview[]
  @@index([companyId], name: "idx_employee_companyId")
}

model Position {
  id                Int             @id @default(autoincrement())
  companyId         Int
  interviewFlowId   Int?
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow     InterviewFlow?  @relation(fields: [interviewFlowId], references: [id], onDelete: SetNull)
  title             String          @db.VarChar(255)
  description       String?         @db.Text
  status            String          @db.VarChar(50)
  isVisible         Boolean         @default(true)
  location          String?         @db.VarChar(255)
  jobDescription    String?         @db.Text
  requirements      String?         @db.Text
  responsibilities  String?         @db.Text
  salaryMin         Float?
  salaryMax         Float?
  employmentType    String?         @db.VarChar(50)
  benefits          String?         @db.Text
  companyDescription String?        @db.Text
  applicationDeadline DateTime?
  contactInfo       String?         @db.VarChar(255)
  applications      Application[]
  @@index([companyId], name: "idx_position_companyId")
  @@index([interviewFlowId], name: "idx_position_interviewFlowId")
}

model InterviewFlow {
  id           Int             @id @default(autoincrement())
  description  String?         @db.Text
  positions    Position[]
  steps        InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int?
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id], onDelete: Cascade)
  interviewType   InterviewType? @relation(fields: [interviewTypeId], references: [id], onDelete: SetNull)
  name            String         @db.VarChar(100)
  orderIndex      Int
  interview Interview[]
  @@index([interviewFlowId], name: "idx_interviewStep_interviewFlowId")
}

model InterviewType {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(100)
  description  String?         @db.Text
  steps        InterviewStep[]
}

model Application {
  id            Int          @id @default(autoincrement())
  positionId    Int
  candidateId   Int
  position      Position     @relation(fields: [positionId], references: [id], onDelete: Cascade)
  candidate     Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  applicationDate DateTime
  status        String?      @db.VarChar(50)
  notes         String?      @db.Text
  interviews    Interview[]
  @@index([positionId], name: "idx_application_positionId")
  @@index([candidateId], name: "idx_application_candidateId")
}

model Interview {
  id              Int             @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int?
  application     Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewStep   InterviewStep   @relation(fields: [interviewStepId], references: [id], onDelete: Cascade)
  employee        Employee?       @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  interviewDate   DateTime?
  result          String?         @db.VarChar(50)
  score           Int?
  notes           String?         @db.Text
  @@index([applicationId], name: "idx_interview_applicationId")
  @@index([employeeId], name: "idx_interview_employeeId")
}